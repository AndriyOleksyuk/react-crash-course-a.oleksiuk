{"version":3,"sources":["ModalWindow.js","MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["ModalWindow","this","props","text","resendHandler","closeModalHandler","Modal","show","onHide","Header","Title","Body","Footer","Button","onClick","variant","Component","MainContainer","cancelHandler","requestHandler","isRequestSended","Container","Row","className","float","Col","xs","xsOffset","Card","size","block","disabled","Alert","CancelToken","axios","URL","App","state","error","data","source","getUser","that","setState","get","cancelToken","token","then","res","userInfo","results","email","catch","thrown","isCancel","message","finally","canceleRequest","cancel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fce5ea1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\n\nexport class ModalWindow extends Component {\n    render() {\n        const {text, resendHandler, closeModalHandler} = this.props;\n        return (\n            <Modal show={!!text} onHide={closeModalHandler}>\n                <Modal.Header>\n                    <Modal.Title>Request failed</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p>{text}</p>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button onClick={resendHandler} variant=\"secondary\">Resend</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default ModalWindow;\n","import React, { Component } from 'react';\nimport { Button, Card, Alert, Row, Col, Container } from 'react-bootstrap';\n\nexport class MainContainer extends Component {\n    render() {\n        const {text, cancelHandler, requestHandler, isRequestSended} = this.props;\n        return (\n            <Container>\n                <Row className=\"show-grid\" float=\"center\">\n                    <Col xs={12} xsOffset={6}>\n                        <Card>\n                            <Card.Header>Featured</Card.Header>\n                            <Card.Body>\n                                <Card.Title>First lesson</Card.Title>\n                                <Button onClick={requestHandler} variant=\"primary\" size=\"lg\" block disabled={isRequestSended}>Get Email</Button>\n                                <Button onClick={cancelHandler} variant=\"danger\" size=\"lg\" block disabled={!isRequestSended}>Cancel request</Button>\n                            </Card.Body>\n                            <Card.Body>\n                                {text &&\n                                    <Alert variant=\"success\">\n                                        Email: {text}\n                                    </Alert>\n                                }\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default MainContainer;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ModalWindow from './ModalWindow';\nimport MainContainer from './MainContainer';\n\nconst CancelToken = axios.CancelToken;\nconst URL = 'https://randomuser.me/api/';\n\nexport class App extends Component {\n    state = {\n        isRequestSended: false,\n        error: '',\n        data: {}\n    }\n\n    source = CancelToken.source();\n\n    getUser = () => {\n        var that = this;\n        that.setState({\n            error: '',\n            data: {},\n            isRequestSended: true\n        });\n\n        axios.get(URL, {\n            cancelToken: that.source.token\n        })\n            .then(res => res.data)\n            .then(function (data) {\n                var userInfo = data.results[0];\n                that.setState({\n                    data: {\n                        email: userInfo.email\n                    }\n                })\n            }).catch(function (thrown) {\n                if (axios.isCancel(thrown)) {\n                    that.setState({\n                        data: {}\n                    })\n                } else {\n                    that.setState({\n                        error: thrown.message\n                    })\n                }\n            }).finally(function () {\n                that.setState({\n                    isRequestSended: false\n                })\n                that.source = CancelToken.source();\n            });\n    }\n\n    canceleRequest = () => {\n        if (this.state.isRequestSended) {\n            this.source.cancel('Operation canceled by the user.');\n        } else {\n            this.setState({\n                isRequestSended: false,\n                error: '',\n                data: {}\n            });\n        }\n    }\n\n    render() {\n        const { isRequestSended, data, error } = this.state;\n        return (\n            <>\n                <MainContainer\n                    text={data.email}\n                    cancelHandler={this.canceleRequest}\n                    requestHandler={this.getUser}\n                    isRequestSended={isRequestSended} />\n                <ModalWindow\n                    text={error}\n                    closeModalHandler={this.canceleRequest}\n                    resendHandler={this.getUser} />\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}