{"version":3,"sources":["containers/ModalWindow.js","components/Size.js","components/Outlined.js","components/RequestActions.js","containers/CardBody.js","containers/MainContainer.js","components/Response.js","App.js","serviceWorker.js","index.js"],"names":["ModalWindow","props","text","resendHandler","closeModalHandler","Modal","show","onHide","Header","Title","Body","Footer","Button","onClick","variant","Size","React","createContext","Component","withSize","outlined","useContext","Outlined","cancelBtn","useRef","requestHandler","size","isRequestSended","cancelHandler","useEffect","current","focus","block","disabled","ref","Consumer","value","CardBody","Card","MainContainer","useState","btnSize","setBtnSize","btnOutline","setBtnOutline","CardBodyAlert","lazy","Container","Row","className","float","Col","xs","xsOffset","ToggleButtonGroup","type","defaultValue","name","onChange","ToggleButton","Provider","fallback","Response","ReactDOM","createPortal","this","children","document","getElementById","CancelToken","axios","source","App","responseError","setResponseError","setIsRequestSended","serviceData","setServiceData","getUser","get","cancelToken","token","then","res","data","userInfo","results","email","JSON","stringify","catch","thrown","isCancel","message","finally","canceleRequest","cancel","Alert","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAsBeA,EAnBK,SAAAC,GAAU,IACnBC,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,cAAeC,EAAqBH,EAArBG,kBAC5B,OACI,kBAACC,EAAA,EAAD,CAAOC,OAAQJ,EAAMK,OAAQH,GACzB,kBAACC,EAAA,EAAMG,OAAP,KACI,kBAACH,EAAA,EAAMI,MAAP,wBAGJ,kBAACJ,EAAA,EAAMK,KAAP,KACI,2BAAIR,IAGR,kBAACG,EAAA,EAAMM,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,QAASV,EAAeW,QAAQ,aAAxC,a,6FCdHC,EAAOC,IAAMC,cAAc,MCAzBD,IDEUE,ECFVF,MAAMC,cAAc,YCsBpBE,GFpBUD,EECF,SAACjB,GACpB,IAAMmB,EAAWC,qBAAWC,GACtBC,EAAYC,iBAAO,MAClBC,EAAwDxB,EAAxDwB,eAAgBC,EAAwCzB,EAAxCyB,KAAMC,EAAkC1B,EAAlC0B,gBAAiBC,EAAiB3B,EAAjB2B,cAQ9C,OANAC,qBAAU,WACHF,GACCJ,EAAUO,QAAQC,UAEvB,CAACJ,IAGA,oCACI,kBAACf,EAAA,EAAD,CAAQC,QAASY,EAAgBX,QAASM,EAAW,UAAWM,KAAMA,EAAMM,OAAK,EAACC,SAAUN,GAA5F,aACA,kBAACf,EAAA,EAAD,CAAQC,QAASe,EAAeM,IAAKX,EAAWT,QAASM,EAAW,SAAUM,KAAMA,EAAMM,OAAK,EAACC,UAAWN,GAA3G,oBFdR,iLACc,IAAD,OACL,OACI,kBAACZ,EAAKoB,SAAN,MACK,SAACC,GAAD,OACG,kBAAClB,EAAD,eAAWQ,KAAMU,GAAW,EAAKnC,eALrD,EAAM,CAA2Be,IAAME,YGe5BmB,EAhBE,SAAApC,GAAU,IAChB2B,EAAkD3B,EAAlD2B,cAAeH,EAAmCxB,EAAnCwB,eAAgBE,EAAmB1B,EAAnB0B,gBACtC,OACI,oCACI,kBAACW,EAAA,EAAK5B,KAAN,KACA,kBAAC4B,EAAA,EAAK7B,MAAN,qBACA,kBAAC,EAAD,CACImB,cAAeA,EACfH,eAAgBA,EAChBE,gBAAiBA,OCqClBY,EA3CO,SAAAtC,GAAU,IACrBC,EAAwDD,EAAxDC,KAAM0B,EAAkD3B,EAAlD2B,cAAeH,EAAmCxB,EAAnCwB,eAAgBE,EAAmB1B,EAAnB0B,gBADjB,EAEGa,mBAAS,MAFZ,mBAEpBC,EAFoB,KAEXC,EAFW,OAGSF,mBAAS,IAHlB,mBAGpBG,EAHoB,KAGRC,EAHQ,KAKrBC,EAAgB7B,IAAM8B,MAAK,kBAAM,iCAEvC,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,UAAU,YAAYC,MAAM,UAC7B,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,SAAU,GACnB,kBAACf,EAAA,EAAD,KACI,kBAACA,EAAA,EAAK9B,OAAN,iBACA,kBAAC8C,EAAA,EAAD,CAAmBC,KAAK,QAAQC,aAAcf,EAASgB,KAAK,eAAeC,SAAUhB,GACjF,kBAACiB,EAAA,EAAD,CAAc7C,QAAQ,YAAYsB,MAAO,MAAzC,4BACA,kBAACuB,EAAA,EAAD,CAAc7C,QAAQ,YAAYsB,MAAO,MAAzC,2BAEJ,kBAACkB,EAAA,EAAD,CAAmBC,KAAK,QAAQC,aAAcb,EAAYc,KAAK,mBAAmBC,SAAUd,GACxF,kBAACe,EAAA,EAAD,CAAc7C,QAAQ,oBAAoBsB,MAAO,YAAjD,kCACA,kBAACuB,EAAA,EAAD,CAAc7C,QAAQ,oBAAoBsB,MAAO,IAAjD,sCAGJ,kBAACd,EAASsC,SAAV,CAAmBxB,MAAOO,GACtB,kBAAC5B,EAAK6C,SAAN,CAAexB,MAAOK,GAClB,kBAAC,EAAD,CACIvC,KAAMA,EACN0B,cAAeA,EACfH,eAAgBA,EAChBE,gBAAiBA,MAI7B,kBAAC,WAAD,CAAUkC,SAAS,IACf,kBAAChB,EAAD,CAAe3C,KAAMA,UCrC5B4D,E,iLAEjB,OAAOC,IAASC,aAAaC,KAAKhE,MAAMiE,SAAUC,SAASC,eAAe,iB,GAFxClD,a,SCKhCmD,EAAcC,IAAMD,YACtBE,EAASF,EAAYE,SA6DVC,EA3DH,SAAAvE,GAAU,IAAD,EACyBuC,mBAAS,IADlC,mBACViC,EADU,KACKC,EADL,OAE6BlC,oBAAS,GAFtC,mBAEVb,EAFU,KAEOgD,EAFP,OAGqBnC,mBAAS,IAH9B,mBAGVoC,EAHU,KAGGC,EAHH,KAKXC,EAAU,WACZJ,EAAiB,IACjBC,GAAmB,GACnBE,EAAe,IAEfP,IAAMS,IAdF,6BAcW,CACXC,YAAaT,EAAOU,QAEvBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBF,MAAK,SAAUE,GACZ,IAAIC,EAAWD,EAAKE,QAAQ,GAC5BT,EAAe,CAACU,MAAOF,EAASE,MAAOH,KAAMI,KAAKC,UAAUL,EAAM,KAAM,QACzEM,OAAM,SAAUC,GACXrB,IAAMsB,SAASD,GACfd,EAAe,IAEfH,EAAiBiB,EAAOE,YAE7BC,SAAQ,WACPnB,GAAmB,GACnBJ,EAASF,EAAYE,aAIvBwB,EAAiB,WACfpE,EACA4C,EAAOyB,OAAO,oCAEdtB,EAAiB,IACjBC,GAAmB,GACnBE,EAAe,MAIvB,OACI,oCACI,kBAAC,EAAD,CACI3E,KAAM0E,EAAYW,MAClB3D,cAAemE,EACftE,eAAgBqD,EAChBnD,gBAAiBA,IACrB,kBAAC,EAAD,CACIzB,KAAMuE,EACNrE,kBAAmB2F,EACnB5F,cAAe2E,IACnB,kBAAC,EAAD,KACI,kBAAC/B,EAAA,EAAD,KACI,kBAACkD,EAAA,EAAD,KAAQrB,EAAYQ,UCnDpBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNvC,IAASwC,OAAO,kBAAC,EAAD,MAASpC,SAASC,eAAe,SDyH3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.f4af1a67.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Modal } from 'react-bootstrap';\n\nconst ModalWindow = props => {\n    const {text, resendHandler, closeModalHandler} = props;\n    return (\n        <Modal show={!!text} onHide={closeModalHandler}>\n            <Modal.Header>\n                <Modal.Title>Request failed</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <p>{text}</p>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button onClick={resendHandler} variant=\"secondary\">Resend</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default ModalWindow;\n","import React from 'react';\n\nexport const Size = React.createContext('lg')\n\nexport function withSize(Component) {\n    return class SizeWrapper extends React.Component {\n        render() {\n            return (\n                <Size.Consumer>\n                    {(value) => (\n                        <Component size={value} {...this.props} />\n                    )}\n                </Size.Consumer>\n            )\n        }\n    }\n}","import React from 'react';\n\nexport default React.createContext('outline-');","import React, {useContext, useRef, useEffect} from 'react';\nimport { Button} from 'react-bootstrap';\nimport {withSize} from '../components/Size';\nimport Outlined from '../components/Outlined'\n\nconst RequestActions = (props) => {\n    const outlined = useContext(Outlined);\n    const cancelBtn = useRef(null);\n    const {requestHandler, size, isRequestSended, cancelHandler} = props;\n\n    useEffect(() => {\n        if(isRequestSended) {\n            cancelBtn.current.focus();\n        }\n    }, [isRequestSended]);\n\n    return (\n        <>\n            <Button onClick={requestHandler} variant={outlined + \"primary\"} size={size} block disabled={isRequestSended}>Get Email</Button>\n            <Button onClick={cancelHandler} ref={cancelBtn} variant={outlined + \"danger\"} size={size} block disabled={!isRequestSended}>Cancel request</Button>\n        </>\n    );\n}\n\nexport default withSize(RequestActions);\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport RequestActions from '../components/RequestActions';\n\nconst CardBody = props => {\n    const {cancelHandler, requestHandler, isRequestSended} = props;\n    return (\n        <>\n            <Card.Body>                            \n            <Card.Title>First lesson</Card.Title>\n            <RequestActions \n                cancelHandler={cancelHandler} \n                requestHandler={requestHandler} \n                isRequestSended={isRequestSended} />\n            </Card.Body>\n            \n        </>\n    );\n}\n\nexport default CardBody;\n","import React, {Suspense, useState} from 'react';\nimport { Card, Row, Col, Container, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport CardBody from './CardBody';\n\nimport {Size} from '../components/Size';\nimport Outlined from '../components/Outlined';\n\nconst MainContainer = props => {\n    const {text, cancelHandler, requestHandler, isRequestSended} = props;\n    const [btnSize, setBtnSize] = useState('sm');\n    const [btnOutline, setBtnOutline] = useState('');\n\n    const CardBodyAlert = React.lazy(() => import('../components/CardBodyAlert'));\n\n    return (\n        <Container>\n            <Row className=\"show-grid\" float=\"center\">\n                <Col xs={12} xsOffset={6}>\n                    <Card>\n                        <Card.Header>Featured</Card.Header>\n                        <ToggleButtonGroup type=\"radio\" defaultValue={btnSize} name=\"sizeSwitcher\" onChange={setBtnSize}>\n                            <ToggleButton variant=\"secondary\" value={'sm'}>Set small buttons by HOC</ToggleButton>\n                            <ToggleButton variant=\"secondary\" value={'lg'}>Set big buttons by HOC</ToggleButton>\n                        </ToggleButtonGroup>\n                        <ToggleButtonGroup type=\"radio\" defaultValue={btnOutline} name=\"outlinedSwitcher\" onChange={setBtnOutline}>\n                            <ToggleButton variant=\"outline-secondary\" value={'outline-'}>set outline by hook useContext</ToggleButton>\n                            <ToggleButton variant=\"outline-secondary\" value={''}>delete outline by hook useContext</ToggleButton>\n                        </ToggleButtonGroup>\n                        \n                        <Outlined.Provider value={btnOutline}>\n                            <Size.Provider value={btnSize}>\n                                <CardBody \n                                    text={text} \n                                    cancelHandler={cancelHandler} \n                                    requestHandler={requestHandler} \n                                    isRequestSended={isRequestSended} />\n                            </Size.Provider>\n                        </Outlined.Provider>\n\n                        <Suspense fallback=\"\">\n                            <CardBodyAlert text={text} />\n                        </Suspense>\n\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default MainContainer;\n","import { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default class Response extends Component {\n  render() {\n    return ReactDOM.createPortal(this.props.children, document.getElementById('response'));\n  }\n}\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport ModalWindow from './containers/ModalWindow';\nimport MainContainer from './containers/MainContainer';\nimport Response from './components/Response';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst URL = 'https://randomuser.me/api/';\nconst CancelToken = axios.CancelToken;\nlet source = CancelToken.source();\n\nconst App = props => {\n    const [responseError, setResponseError] = useState('');\n    const [isRequestSended, setIsRequestSended] = useState(false);\n    const [serviceData, setServiceData] = useState({});\n    \n    const getUser = () => {\n        setResponseError('');\n        setIsRequestSended(true);\n        setServiceData({});\n\n        axios.get(URL, {\n            cancelToken: source.token\n        })\n        .then(res => res.data)\n        .then(function (data) {\n            var userInfo = data.results[0];\n            setServiceData({email: userInfo.email, data: JSON.stringify(data, null, 4)});\n        }).catch(function (thrown) {\n            if (axios.isCancel(thrown)) {\n                setServiceData({});\n            } else {\n                setResponseError(thrown.message);\n            }\n        }).finally(function () {\n            setIsRequestSended(false);\n            source = CancelToken.source();\n        });\n}\n\n    const canceleRequest = () => {\n        if (isRequestSended) {\n            source.cancel('Operation canceled by the user.');\n        } else {\n            setResponseError('');\n            setIsRequestSended(false);\n            setServiceData({});\n        }\n    }\n\n    return (\n        <>\n            <MainContainer\n                text={serviceData.email}\n                cancelHandler={canceleRequest}\n                requestHandler={getUser}\n                isRequestSended={isRequestSended} />\n            <ModalWindow\n                text={responseError}\n                closeModalHandler={canceleRequest}\n                resendHandler={getUser} />\n            <Response>\n                <Container>\n                    <Alert>{serviceData.data}</Alert>                \n                </Container>\n            </Response>\n        </>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}