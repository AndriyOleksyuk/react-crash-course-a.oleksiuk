{"version":3,"sources":["actions/Types.js","actions/RequestActions.js","containers/ModalWindow.js","components/RequestActions.js","containers/CardBody.js","containers/MainContainer.js","actions/ThemeActions.js","components/Response.js","App.js","serviceWorker.js","reducers/ThemeReducer.js","reducers/index.js","reducers/RequestReducer.js","state.js","index.js"],"names":["types","START_FETCH_DATA","FINISH_FETCH_DATA","HANDLE_ERROR","SET_BUTTONS_SIZE","SET_BUTTONS_OUTLINE","SET_CANCEL_TOKEN","cancelRequest","dispatch","getState","source","request","CancelToken","axios","cancel","setCancelSource","fetchUserData","cancelToken","token","startFetchUserData","get","then","res","data","userInfo","results","finishFetchUserData","email","JSON","stringify","catch","thrown","isCancel","handleError","message","type","response","error","mapDispatchToProps","closeModalHandler","resendHandler","connect","store","props","Modal","show","onHide","Header","Title","Body","Footer","Button","onClick","variant","cancelHandler","requestHandler","requestIsSended","theme","btnSize","btnOutline","cancelBtn","useRef","useEffect","current","focus","size","block","disabled","ref","CardBody","Card","setBtnSize","setBtnOutline","outlineValue","CardBodyAlert","React","lazy","Container","Row","className","float","Col","xs","xsOffset","ToggleButtonGroup","defaultValue","name","onChange","ToggleButton","value","fallback","Response","ReactDOM","createPortal","this","children","document","getElementById","Component","serviceData","json","Alert","Boolean","window","location","hostname","match","reducer","combineReducers","state","action","createStore","initialState","composeWithDevTools","applyMiddleware","thunk","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0b006b5.chunk.js","sourcesContent":["const types = {\n    START_FETCH_DATA: 'START_FETCH_DATA',\n    FINISH_FETCH_DATA: 'FINISH_FETCH_DATA',\n    HANDLE_ERROR: 'HANDLE_ERROR',\n    SET_BUTTONS_SIZE: 'SET_BUTTONS_SIZE',\n    SET_BUTTONS_OUTLINE: 'SET_BUTTONS_OUTLINE',\n    SET_CANCEL_TOKEN: 'SET_CANCEL_TOKEN'\n}\n\nexport default types;","import axios from 'axios';\nimport types from './Types';\n\nexport const cancelRequest = () => (dispatch, getState) => {\n    let { source } = getState().request;\n    const CancelToken = axios.CancelToken;\n\n    source.cancel('Operation canceled by the user.');\n   \n    source = CancelToken.source();\n    dispatch(setCancelSource(source));\n}\n\nexport const fetchUserData = () => (dispatch, getState) => {\n    let { source } = getState().request;\n    const URL = 'https://randomuser.me/api/';\n    const cancelToken = source.token;\n\n    dispatch(startFetchUserData());\n\n    axios.get(URL, {cancelToken})\n        .then(res => res.data)\n        .then(function (data) {\n            var userInfo = data.results[0];            \n            dispatch(finishFetchUserData({email: userInfo.email, data: JSON.stringify(data, null, 4)}));\n        }).catch(function (thrown) {\n            if (axios.isCancel(thrown)) {\n                dispatch(finishFetchUserData({}));\n            } else {\n                dispatch(handleError(thrown.message));\n            }\n        });\n};\n\nexport const setCancelSource = (source) => ({ type: types.SET_CANCEL_TOKEN, source});\nexport const startFetchUserData = () => ({ type: types.START_FETCH_DATA});\nexport const finishFetchUserData = (response) => ({ type: types.FINISH_FETCH_DATA, response});\nexport const handleError = (error) => ({ type: types.HANDLE_ERROR, error});","import React from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport {fetchUserData, cancelRequest} from '../actions/RequestActions';\n\nconst ModalWindow = props => {\n    const {error, resendHandler, closeModalHandler} = props;\n    return (\n        <Modal show={!!error} onHide={closeModalHandler}>\n            <Modal.Header>\n                <Modal.Title>Request failed</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <p>{error}</p>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button onClick={resendHandler} variant=\"secondary\">Resend</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n\nfunction mapStateToProps(store) {\n    const { error } = store.request;\n    return {\n        error: error\n    }\n}\n\nconst mapDispatchToProps = {\n    closeModalHandler: cancelRequest,\n    resendHandler: fetchUserData\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalWindow);\n","import React, {useRef, useEffect} from 'react';\nimport {Button} from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport {cancelRequest, fetchUserData} from '../actions/RequestActions';\n\nconst RequestActions = (props) => {\n    const cancelBtn = useRef(null);\n    const {requestHandler, btnSize, btnOutline, requestIsSended, cancelHandler} = props;\n\n    useEffect(() => {\n        if(requestIsSended) {\n            cancelBtn.current.focus();\n        }\n    }, [requestIsSended]);\n\n    return (\n        <>\n            <Button onClick={requestHandler} variant={btnOutline + \"primary\"} size={btnSize} block disabled={requestIsSended}>Get Email</Button>\n            <Button onClick={cancelHandler} ref={cancelBtn} variant={btnOutline + \"danger\"} size={btnSize} block disabled={!requestIsSended}>Cancel request</Button>\n        </>\n    );\n}\n\nfunction mapStateToProps(store) {\n    const { requestIsSended } = store.request;\n    const { btnSize, btnOutline } = store.theme;\n\n    return {\n        btnSize,\n        btnOutline,\n        requestIsSended\n    }\n}\n\nconst mapDispatchToProps = {\n    cancelHandler: cancelRequest,\n    requestHandler: fetchUserData\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RequestActions);\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport RequestActions from '../components/RequestActions';\n\nconst CardBody = () => {\n    return (\n        <>\n            <Card.Body>                            \n            <Card.Title>First lesson</Card.Title>\n            <RequestActions  />\n            </Card.Body>\n            \n        </>\n    );\n}\n\nexport default CardBody;\n","import React, {Suspense} from 'react';\nimport {connect} from 'react-redux';\nimport { Card, Row, Col, Container, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport CardBody from './CardBody';\n\nimport {setBtnSize, setBtnOutline} from '../actions/ThemeActions';\n\nconst MainContainer = props => {\n    const {btnSize, btnOutline, setBtnOutline, setBtnSize} = props;\n\n    const CardBodyAlert = React.lazy(() => import('../components/CardBodyAlert'));\n\n    return (\n        <Container>\n            <Row className=\"show-grid\" float=\"center\">\n                <Col xs={12} xsOffset={6}>\n                    <Card>\n                        <Card.Header>Featured</Card.Header>\n                        <ToggleButtonGroup type=\"radio\" defaultValue={btnSize} name=\"sizeSwitcher\" onChange={setBtnSize}>\n                            <ToggleButton variant=\"secondary\" value={'sm'}>Set small buttons</ToggleButton>\n                            <ToggleButton variant=\"secondary\" value={'lg'}>Set big buttons</ToggleButton>\n                        </ToggleButtonGroup>\n                        <ToggleButtonGroup type=\"radio\" defaultValue={btnOutline} name=\"outlinedSwitcher\" onChange={setBtnOutline}>\n                            <ToggleButton variant=\"outline-secondary\" value={'outline-'}>Set outline</ToggleButton>\n                            <ToggleButton variant=\"outline-secondary\" value={''}>Delete outline</ToggleButton>\n                        </ToggleButtonGroup>\n                        \n                        <CardBody />\n\n                        <Suspense fallback=\"\">\n                            <CardBodyAlert />\n                        </Suspense>\n\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nfunction mapStateToProps(store) {\n    const { btnSize, btnOutline } = store.theme;\n\n    return {\n        btnSize,\n        btnOutline\n    }\n}\n\nconst mapDispatchToProps = {\n    setBtnSize,\n    setBtnOutline\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainContainer);\n","\nimport types from './Types';\n\nexport const setBtnSize = (size) => ({type: types.SET_BUTTONS_SIZE, size});\nexport const setBtnOutline = (outlineValue) => ({type: types.SET_BUTTONS_OUTLINE, outlineValue});","import { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default class Response extends Component {\n  render() {\n    return ReactDOM.createPortal(this.props.children, document.getElementById('response'));\n  }\n}\n","import React from 'react';\nimport ModalWindow from './containers/ModalWindow';\nimport MainContainer from './containers/MainContainer';\nimport Response from './components/Response';\nimport {connect} from 'react-redux';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst App = props => {\n\n    return (\n        <>\n            <MainContainer />\n            <ModalWindow />\n            <Response>\n                <Container>\n                    <Alert>{props.json}</Alert>\n                </Container>\n            </Response>\n        </>\n    );\n}\n\nfunction mapStateToProps(store) {\n    const { serviceData } = store.request;\n\n    return {\n        json: serviceData ? serviceData.data : []\n    }\n}\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import types from '../actions/Types';\n\nexport const ThemeReducer = (state = {btnSize: 'sm', btnOutline: ''}, action) => {\n    switch (action.type) {\n        case types.SET_BUTTONS_SIZE: \n            return {\n                ...state,\n                btnSize: action.size\n            }\n        case types.SET_BUTTONS_OUTLINE:\n            return {\n                ...state,\n                btnOutline: action.outlineValue\n            }\n        default:\n            return state;\n    }\n\n\n}","import { combineReducers } from 'redux';\nimport {RequestReducer} from './RequestReducer';\nimport {ThemeReducer} from './ThemeReducer';\n\nconst reducer = combineReducers({\n    request: RequestReducer,\n    theme: ThemeReducer\n});\n\nexport default reducer;","import types from '../actions/Types';\n\nexport const RequestReducer = (state = {error: '', requestIsSended: false, serviceData: null, source: null}, action) => {\n    switch (action.type) {\n        case types.START_FETCH_DATA:\n            return {\n                ...state,\n                requestIsSended: true,\n                error: ''\n            }\n        case types.FINISH_FETCH_DATA:\n            return {\n                ...state,\n                serviceData: action.response,\n                requestIsSended: false\n            }\n        case types.HANDLE_ERROR:\n            return {\n                ...state,\n                requestIsSended: false,\n                error: action.error\n            }\n        case types.SET_CANCEL_TOKEN:\n            return {\n                ...state,\n                source: action.source\n            }\n        default:\n            return state;\n    }\n}","import axios from 'axios';\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();    \n\nconst state = {\n    request: {\n        error: '',\n        requestIsSended: false,\n        serviceData: null,\n        source: source\n    },\n    theme: {\n        btnSize: 'sm',\n        btnOutline: ''\n    }\n};\nexport default state;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducers'\nimport initialState from './state'\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}